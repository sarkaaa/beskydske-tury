"""Add date formatting options."""
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer on OBJECT

"""Do not infer field types from field values."""
directive @dontInfer on OBJECT

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = []
) on OBJECT

"""
DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".

Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String

  """Copy file to static directory and return public url to it"""
  publicURL: String

  """Returns all children nodes filtered by type ImageSharp"""
  childrenImageSharp: [ImageSharp]

  """
  Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  """
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

"""Node Interface"""
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
  contentFilePath: String
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Site implements Node {
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
  image: String
}

type SiteFunction implements Node {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON
  pluginCreator: SitePlugin
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type SitePlugin implements Node {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteBuildMetadata implements Node {
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): GatsbyImageData!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

scalar GatsbyImageData

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type Query {
  allStrapiTrail(filter: STRAPI_TRAILFilterInput, sort: [STRAPI_TRAILSortInput], skip: Int, limit: Int): STRAPI_TRAILConnection!
  strapiTrail(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, title: StringQueryOperatorInput, content: STRAPI_TRAILContentFilterInput, criterion: StringQueryOperatorInput, trail_type: StringQueryOperatorInput, slug: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, publishedAt: DateQueryOperatorInput, cover_image: STRAPI__MEDIAFilterInput, bus: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFilterInput, car: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFilterInput, train: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFilterInput, coords: STRAPI__COMPONENT_COORDS_COORDSFilterInput, strapi_id: IntQueryOperatorInput, photos: STRAPI__MEDIAFilterListInput): STRAPI_TRAIL
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, url: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, childrenImageSharp: ImageSharpFilterListInput, childImageSharp: ImageSharpFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: [FileSortInput], skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: [DirectorySortInput], skip: Int, limit: Int): DirectoryConnection!
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, jsxRuntime: StringQueryOperatorInput, trailingSlash: StringQueryOperatorInput, graphqlTypegen: BooleanQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  allSite(filter: SiteFilterInput, sort: [SiteSortInput], skip: Int, limit: Int): SiteConnection!
  siteFunction(functionRoute: StringQueryOperatorInput, pluginName: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput, absoluteCompiledFilePath: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteFunction
  allSiteFunction(filter: SiteFunctionFilterInput, sort: [SiteFunctionSortInput], skip: Int, limit: Int): SiteFunctionConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, pluginCreator: SitePluginFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: [SitePageSortInput], skip: Int, limit: Int): SitePageConnection!
  sitePlugin(resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, packageJson: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: [SitePluginSortInput], skip: Int, limit: Int): SitePluginConnection!
  siteBuildMetadata(buildTime: DateQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: [SiteBuildMetadataSortInput], skip: Int, limit: Int): SiteBuildMetadataConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: GatsbyImageDataQueryOperatorInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: [ImageSharpSortInput], skip: Int, limit: Int): ImageSharpConnection!
  content(data: ContentDataFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Content
  allContent(filter: ContentFilterInput, sort: [ContentSortInput], skip: Int, limit: Int): ContentConnection!
  contentData(content: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ContentData
  allContentData(filter: ContentDataFilterInput, sort: [ContentDataSortInput], skip: Int, limit: Int): ContentDataConnection!
  carAvailibility(parking1: StringQueryOperatorInput, parking2: StringQueryOperatorInput, parking3: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): CarAvailibility
  allCarAvailibility(filter: CarAvailibilityFilterInput, sort: [CarAvailibilitySortInput], skip: Int, limit: Int): CarAvailibilityConnection!
  busAvailibility(stop1: StringQueryOperatorInput, stop2: StringQueryOperatorInput, stop3: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): BusAvailibility
  allBusAvailibility(filter: BusAvailibilityFilterInput, sort: [BusAvailibilitySortInput], skip: Int, limit: Int): BusAvailibilityConnection!
  trainAvailibility(station1: StringQueryOperatorInput, station2: StringQueryOperatorInput, station3: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): TrainAvailibility
  allTrainAvailibility(filter: TrainAvailibilityFilterInput, sort: [TrainAvailibilitySortInput], skip: Int, limit: Int): TrainAvailibilityConnection!
  coords(lat1: FloatQueryOperatorInput, lng1: FloatQueryOperatorInput, lat2: FloatQueryOperatorInput, lng2: FloatQueryOperatorInput, lat3: FloatQueryOperatorInput, lng3: FloatQueryOperatorInput, lat4: FloatQueryOperatorInput, lng4: FloatQueryOperatorInput, lat5: FloatQueryOperatorInput, lng5: FloatQueryOperatorInput, lat6: FloatQueryOperatorInput, lng6: FloatQueryOperatorInput, lat7: FloatQueryOperatorInput, lng7: FloatQueryOperatorInput, lat8: FloatQueryOperatorInput, lng8: FloatQueryOperatorInput, lat9: FloatQueryOperatorInput, lng9: FloatQueryOperatorInput, lat10: FloatQueryOperatorInput, lng10: FloatQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Coords
  allCoords(filter: CoordsFilterInput, sort: [CoordsSortInput], skip: Int, limit: Int): CoordsConnection!
  uploadFile(name: StringQueryOperatorInput, alternativeText: StringQueryOperatorInput, caption: StringQueryOperatorInput, width: IntQueryOperatorInput, height: IntQueryOperatorInput, formats: JSONQueryOperatorInput, hash: StringQueryOperatorInput, ext: StringQueryOperatorInput, mime: StringQueryOperatorInput, size: FloatQueryOperatorInput, url: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): UploadFile
  allUploadFile(filter: UploadFileFilterInput, sort: [UploadFileSortInput], skip: Int, limit: Int): UploadFileConnection!
  strapiMedia(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, name: StringQueryOperatorInput, alternativeText: StringQueryOperatorInput, caption: StringQueryOperatorInput, width: IntQueryOperatorInput, height: IntQueryOperatorInput, formats: STRAPI__MEDIAFormatsFilterInput, hash: StringQueryOperatorInput, ext: StringQueryOperatorInput, mime: StringQueryOperatorInput, size: FloatQueryOperatorInput, url: StringQueryOperatorInput, createdAt: DateQueryOperatorInput, updatedAt: DateQueryOperatorInput, localFile: FileFilterInput, strapi_id: IntQueryOperatorInput): STRAPI__MEDIA
  allStrapiMedia(filter: STRAPI__MEDIAFilterInput, sort: [STRAPI__MEDIASortInput], skip: Int, limit: Int): STRAPI__MEDIAConnection!
  strapiComponentCoordsCoords(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, lat1: FloatQueryOperatorInput, lat2: FloatQueryOperatorInput, lat3: IntQueryOperatorInput, lat4: IntQueryOperatorInput, lat5: FloatQueryOperatorInput, lat6: IntQueryOperatorInput, lat7: IntQueryOperatorInput, lat8: IntQueryOperatorInput, lat9: IntQueryOperatorInput, lat10: IntQueryOperatorInput, lng1: FloatQueryOperatorInput, lng2: FloatQueryOperatorInput, lng3: FloatQueryOperatorInput, lng4: FloatQueryOperatorInput, lng5: FloatQueryOperatorInput, lng6: IntQueryOperatorInput, lng7: IntQueryOperatorInput, lng8: IntQueryOperatorInput, lng9: IntQueryOperatorInput, lng10: IntQueryOperatorInput, strapi_id: IntQueryOperatorInput): STRAPI__COMPONENT_COORDS_COORDS
  allStrapiComponentCoordsCoords(filter: STRAPI__COMPONENT_COORDS_COORDSFilterInput, sort: [STRAPI__COMPONENT_COORDS_COORDSSortInput], skip: Int, limit: Int): STRAPI__COMPONENT_COORDS_COORDSConnection!
  strapiComponentAvailabilityAvailabilityTrain(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, station1: StringQueryOperatorInput, station2: StringQueryOperatorInput, station3: StringQueryOperatorInput, strapi_id: IntQueryOperatorInput): STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAIN
  allStrapiComponentAvailabilityAvailabilityTrain(filter: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFilterInput, sort: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINSortInput], skip: Int, limit: Int): STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINConnection!
  strapiComponentAvailabilityAvailabilityCar(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, parking1: StringQueryOperatorInput, parking2: StringQueryOperatorInput, parking3: StringQueryOperatorInput, strapi_id: IntQueryOperatorInput): STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAR
  allStrapiComponentAvailabilityAvailabilityCar(filter: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFilterInput, sort: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARSortInput], skip: Int, limit: Int): STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARConnection!
  strapiComponentAvailabilityAvailabilityBus(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, stop1: StringQueryOperatorInput, stop2: StringQueryOperatorInput, stop3: StringQueryOperatorInput, strapi_id: IntQueryOperatorInput): STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUS
  allStrapiComponentAvailabilityAvailabilityBus(filter: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFilterInput, sort: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSSortInput], skip: Int, limit: Int): STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSConnection!
  strapiTrailContentTextnode(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, content: StringQueryOperatorInput): STRAPI_TRAIL_CONTENT_TEXTNODE
  allStrapiTrailContentTextnode(filter: STRAPI_TRAIL_CONTENT_TEXTNODEFilterInput, sort: [STRAPI_TRAIL_CONTENT_TEXTNODESortInput], skip: Int, limit: Int): STRAPI_TRAIL_CONTENT_TEXTNODEConnection!
  instagramContent(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, media_url: StringQueryOperatorInput, media_type: StringQueryOperatorInput, permalink: StringQueryOperatorInput, timestamp: DateQueryOperatorInput, caption: StringQueryOperatorInput, username: StringQueryOperatorInput, album: InstagramContentAlbumFilterListInput, media_id: StringQueryOperatorInput, localImage: FileFilterInput, localFile: FileFilterInput): InstagramContent
  allInstagramContent(filter: InstagramContentFilterInput, sort: [InstagramContentSortInput], skip: Int, limit: Int): InstagramContentConnection!
}

type STRAPI_TRAILConnection {
  totalCount: Int!
  edges: [STRAPI_TRAILEdge!]!
  nodes: [STRAPI_TRAIL!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI_TRAILFieldSelector!): [String!]!
  max(field: STRAPI_TRAILFieldSelector!): Float
  min(field: STRAPI_TRAILFieldSelector!): Float
  sum(field: STRAPI_TRAILFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI_TRAILFieldSelector!): [STRAPI_TRAILGroupConnection!]!
}

type STRAPI_TRAILEdge {
  next: STRAPI_TRAIL
  node: STRAPI_TRAIL!
  previous: STRAPI_TRAIL
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input STRAPI_TRAILFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  title: FieldSelectorEnum
  content: STRAPI_TRAILContentFieldSelector
  criterion: FieldSelectorEnum
  trail_type: FieldSelectorEnum
  slug: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  publishedAt: FieldSelectorEnum
  cover_image: STRAPI__MEDIAFieldSelector
  bus: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector
  car: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector
  train: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector
  coords: STRAPI__COMPONENT_COORDS_COORDSFieldSelector
  strapi_id: FieldSelectorEnum
  photos: STRAPI__MEDIAFieldSelector
}

enum FieldSelectorEnum {
  SELECT
}

input NodeFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input InternalFieldSelector {
  content: FieldSelectorEnum
  contentDigest: FieldSelectorEnum
  description: FieldSelectorEnum
  fieldOwners: FieldSelectorEnum
  ignoreType: FieldSelectorEnum
  mediaType: FieldSelectorEnum
  owner: FieldSelectorEnum
  type: FieldSelectorEnum
  contentFilePath: FieldSelectorEnum
}

input STRAPI_TRAILContentFieldSelector {
  data: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector
}

input STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  content: FieldSelectorEnum
}

input STRAPI__MEDIAFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  name: FieldSelectorEnum
  alternativeText: FieldSelectorEnum
  caption: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  formats: STRAPI__MEDIAFormatsFieldSelector
  hash: FieldSelectorEnum
  ext: FieldSelectorEnum
  mime: FieldSelectorEnum
  size: FieldSelectorEnum
  url: FieldSelectorEnum
  createdAt: FieldSelectorEnum
  updatedAt: FieldSelectorEnum
  localFile: FileFieldSelector
  strapi_id: FieldSelectorEnum
}

input STRAPI__MEDIAFormatsFieldSelector {
  thumbnail: STRAPI__MEDIAFormatsThumbnailFieldSelector
  large: STRAPI__MEDIAFormatsLargeFieldSelector
  medium: STRAPI__MEDIAFormatsMediumFieldSelector
  small: STRAPI__MEDIAFormatsSmallFieldSelector
}

input STRAPI__MEDIAFormatsThumbnailFieldSelector {
  name: FieldSelectorEnum
  hash: FieldSelectorEnum
  ext: FieldSelectorEnum
  mime: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  size: FieldSelectorEnum
  url: FieldSelectorEnum
  provider_metadata: STRAPI__MEDIAFormatsThumbnailProvider_metadataFieldSelector
}

input STRAPI__MEDIAFormatsThumbnailProvider_metadataFieldSelector {
  public_id: FieldSelectorEnum
  resource_type: FieldSelectorEnum
}

input STRAPI__MEDIAFormatsLargeFieldSelector {
  name: FieldSelectorEnum
  hash: FieldSelectorEnum
  ext: FieldSelectorEnum
  mime: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  size: FieldSelectorEnum
  url: FieldSelectorEnum
  provider_metadata: STRAPI__MEDIAFormatsLargeProvider_metadataFieldSelector
}

input STRAPI__MEDIAFormatsLargeProvider_metadataFieldSelector {
  public_id: FieldSelectorEnum
  resource_type: FieldSelectorEnum
}

input STRAPI__MEDIAFormatsMediumFieldSelector {
  name: FieldSelectorEnum
  hash: FieldSelectorEnum
  ext: FieldSelectorEnum
  mime: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  size: FieldSelectorEnum
  url: FieldSelectorEnum
  provider_metadata: STRAPI__MEDIAFormatsMediumProvider_metadataFieldSelector
}

input STRAPI__MEDIAFormatsMediumProvider_metadataFieldSelector {
  public_id: FieldSelectorEnum
  resource_type: FieldSelectorEnum
}

input STRAPI__MEDIAFormatsSmallFieldSelector {
  name: FieldSelectorEnum
  hash: FieldSelectorEnum
  ext: FieldSelectorEnum
  mime: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  size: FieldSelectorEnum
  url: FieldSelectorEnum
  provider_metadata: STRAPI__MEDIAFormatsSmallProvider_metadataFieldSelector
}

input STRAPI__MEDIAFormatsSmallProvider_metadataFieldSelector {
  public_id: FieldSelectorEnum
  resource_type: FieldSelectorEnum
}

input FileFieldSelector {
  sourceInstanceName: FieldSelectorEnum
  absolutePath: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  extension: FieldSelectorEnum
  size: FieldSelectorEnum
  prettySize: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  root: FieldSelectorEnum
  dir: FieldSelectorEnum
  base: FieldSelectorEnum
  ext: FieldSelectorEnum
  name: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  dev: FieldSelectorEnum
  mode: FieldSelectorEnum
  nlink: FieldSelectorEnum
  uid: FieldSelectorEnum
  gid: FieldSelectorEnum
  rdev: FieldSelectorEnum
  ino: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  atime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  ctime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  blksize: FieldSelectorEnum
  blocks: FieldSelectorEnum
  url: FieldSelectorEnum
  publicURL: FieldSelectorEnum
  childrenImageSharp: ImageSharpFieldSelector
  childImageSharp: ImageSharpFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ImageSharpFieldSelector {
  fixed: ImageSharpFixedFieldSelector
  fluid: ImageSharpFluidFieldSelector
  gatsbyImageData: FieldSelectorEnum
  original: ImageSharpOriginalFieldSelector
  resize: ImageSharpResizeFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ImageSharpFixedFieldSelector {
  base64: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  originalName: FieldSelectorEnum
}

input ImageSharpFluidFieldSelector {
  base64: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  src: FieldSelectorEnum
  srcSet: FieldSelectorEnum
  srcWebp: FieldSelectorEnum
  srcSetWebp: FieldSelectorEnum
  sizes: FieldSelectorEnum
  originalImg: FieldSelectorEnum
  originalName: FieldSelectorEnum
  presentationWidth: FieldSelectorEnum
  presentationHeight: FieldSelectorEnum
}

input ImageSharpOriginalFieldSelector {
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  src: FieldSelectorEnum
}

input ImageSharpResizeFieldSelector {
  src: FieldSelectorEnum
  tracedSVG: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  aspectRatio: FieldSelectorEnum
  originalName: FieldSelectorEnum
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  stop1: FieldSelectorEnum
  stop2: FieldSelectorEnum
  stop3: FieldSelectorEnum
  strapi_id: FieldSelectorEnum
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  parking1: FieldSelectorEnum
  parking2: FieldSelectorEnum
  parking3: FieldSelectorEnum
  strapi_id: FieldSelectorEnum
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  station1: FieldSelectorEnum
  station2: FieldSelectorEnum
  station3: FieldSelectorEnum
  strapi_id: FieldSelectorEnum
}

input STRAPI__COMPONENT_COORDS_COORDSFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  lat1: FieldSelectorEnum
  lat2: FieldSelectorEnum
  lat3: FieldSelectorEnum
  lat4: FieldSelectorEnum
  lat5: FieldSelectorEnum
  lat6: FieldSelectorEnum
  lat7: FieldSelectorEnum
  lat8: FieldSelectorEnum
  lat9: FieldSelectorEnum
  lat10: FieldSelectorEnum
  lng1: FieldSelectorEnum
  lng2: FieldSelectorEnum
  lng3: FieldSelectorEnum
  lng4: FieldSelectorEnum
  lng5: FieldSelectorEnum
  lng6: FieldSelectorEnum
  lng7: FieldSelectorEnum
  lng8: FieldSelectorEnum
  lng9: FieldSelectorEnum
  lng10: FieldSelectorEnum
  strapi_id: FieldSelectorEnum
}

type STRAPI_TRAILGroupConnection {
  totalCount: Int!
  edges: [STRAPI_TRAILEdge!]!
  nodes: [STRAPI_TRAIL!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI_TRAILFieldSelector!): [String!]!
  max(field: STRAPI_TRAILFieldSelector!): Float
  min(field: STRAPI_TRAILFieldSelector!): Float
  sum(field: STRAPI_TRAILFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI_TRAILFieldSelector!): [STRAPI_TRAILGroupConnection!]!
  field: String!
  fieldValue: String
}

input STRAPI_TRAILFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  title: StringQueryOperatorInput
  content: STRAPI_TRAILContentFilterInput
  criterion: StringQueryOperatorInput
  trail_type: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  publishedAt: DateQueryOperatorInput
  cover_image: STRAPI__MEDIAFilterInput
  bus: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFilterInput
  car: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFilterInput
  train: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFilterInput
  coords: STRAPI__COMPONENT_COORDS_COORDSFilterInput
  strapi_id: IntQueryOperatorInput
  photos: STRAPI__MEDIAFilterListInput
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
  contentFilePath: StringQueryOperatorInput
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input STRAPI_TRAILContentFilterInput {
  data: STRAPI_TRAIL_CONTENT_TEXTNODEFilterInput
}

input STRAPI_TRAIL_CONTENT_TEXTNODEFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  content: StringQueryOperatorInput
}

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

input STRAPI__MEDIAFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  alternativeText: StringQueryOperatorInput
  caption: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  formats: STRAPI__MEDIAFormatsFilterInput
  hash: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  mime: StringQueryOperatorInput
  size: FloatQueryOperatorInput
  url: StringQueryOperatorInput
  createdAt: DateQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  localFile: FileFilterInput
  strapi_id: IntQueryOperatorInput
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input STRAPI__MEDIAFormatsFilterInput {
  thumbnail: STRAPI__MEDIAFormatsThumbnailFilterInput
  large: STRAPI__MEDIAFormatsLargeFilterInput
  medium: STRAPI__MEDIAFormatsMediumFilterInput
  small: STRAPI__MEDIAFormatsSmallFilterInput
}

input STRAPI__MEDIAFormatsThumbnailFilterInput {
  name: StringQueryOperatorInput
  hash: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  mime: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  size: FloatQueryOperatorInput
  url: StringQueryOperatorInput
  provider_metadata: STRAPI__MEDIAFormatsThumbnailProvider_metadataFilterInput
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input STRAPI__MEDIAFormatsThumbnailProvider_metadataFilterInput {
  public_id: StringQueryOperatorInput
  resource_type: StringQueryOperatorInput
}

input STRAPI__MEDIAFormatsLargeFilterInput {
  name: StringQueryOperatorInput
  hash: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  mime: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  size: FloatQueryOperatorInput
  url: StringQueryOperatorInput
  provider_metadata: STRAPI__MEDIAFormatsLargeProvider_metadataFilterInput
}

input STRAPI__MEDIAFormatsLargeProvider_metadataFilterInput {
  public_id: StringQueryOperatorInput
  resource_type: StringQueryOperatorInput
}

input STRAPI__MEDIAFormatsMediumFilterInput {
  name: StringQueryOperatorInput
  hash: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  mime: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  size: FloatQueryOperatorInput
  url: StringQueryOperatorInput
  provider_metadata: STRAPI__MEDIAFormatsMediumProvider_metadataFilterInput
}

input STRAPI__MEDIAFormatsMediumProvider_metadataFilterInput {
  public_id: StringQueryOperatorInput
  resource_type: StringQueryOperatorInput
}

input STRAPI__MEDIAFormatsSmallFilterInput {
  name: StringQueryOperatorInput
  hash: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  mime: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  size: FloatQueryOperatorInput
  url: StringQueryOperatorInput
  provider_metadata: STRAPI__MEDIAFormatsSmallProvider_metadataFilterInput
}

input STRAPI__MEDIAFormatsSmallProvider_metadataFilterInput {
  public_id: StringQueryOperatorInput
  resource_type: StringQueryOperatorInput
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  url: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  childrenImageSharp: ImageSharpFilterListInput
  childImageSharp: ImageSharpFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: GatsbyImageDataQueryOperatorInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input GatsbyImageDataQueryOperatorInput {
  eq: GatsbyImageData
  ne: GatsbyImageData
  in: [GatsbyImageData]
  nin: [GatsbyImageData]
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  stop1: StringQueryOperatorInput
  stop2: StringQueryOperatorInput
  stop3: StringQueryOperatorInput
  strapi_id: IntQueryOperatorInput
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  parking1: StringQueryOperatorInput
  parking2: StringQueryOperatorInput
  parking3: StringQueryOperatorInput
  strapi_id: IntQueryOperatorInput
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  station1: StringQueryOperatorInput
  station2: StringQueryOperatorInput
  station3: StringQueryOperatorInput
  strapi_id: IntQueryOperatorInput
}

input STRAPI__COMPONENT_COORDS_COORDSFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  lat1: FloatQueryOperatorInput
  lat2: FloatQueryOperatorInput
  lat3: IntQueryOperatorInput
  lat4: IntQueryOperatorInput
  lat5: FloatQueryOperatorInput
  lat6: IntQueryOperatorInput
  lat7: IntQueryOperatorInput
  lat8: IntQueryOperatorInput
  lat9: IntQueryOperatorInput
  lat10: IntQueryOperatorInput
  lng1: FloatQueryOperatorInput
  lng2: FloatQueryOperatorInput
  lng3: FloatQueryOperatorInput
  lng4: FloatQueryOperatorInput
  lng5: FloatQueryOperatorInput
  lng6: IntQueryOperatorInput
  lng7: IntQueryOperatorInput
  lng8: IntQueryOperatorInput
  lng9: IntQueryOperatorInput
  lng10: IntQueryOperatorInput
  strapi_id: IntQueryOperatorInput
}

input STRAPI__MEDIAFilterListInput {
  elemMatch: STRAPI__MEDIAFilterInput
}

input STRAPI_TRAILSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  title: SortOrderEnum
  content: STRAPI_TRAILContentSortInput
  criterion: SortOrderEnum
  trail_type: SortOrderEnum
  slug: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  publishedAt: SortOrderEnum
  cover_image: STRAPI__MEDIASortInput
  bus: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSSortInput
  car: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARSortInput
  train: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINSortInput
  coords: STRAPI__COMPONENT_COORDS_COORDSSortInput
  strapi_id: SortOrderEnum
  photos: STRAPI__MEDIASortInput
}

enum SortOrderEnum {
  ASC
  DESC
}

input NodeSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input InternalSortInput {
  content: SortOrderEnum
  contentDigest: SortOrderEnum
  description: SortOrderEnum
  fieldOwners: SortOrderEnum
  ignoreType: SortOrderEnum
  mediaType: SortOrderEnum
  owner: SortOrderEnum
  type: SortOrderEnum
  contentFilePath: SortOrderEnum
}

input STRAPI_TRAILContentSortInput {
  data: STRAPI_TRAIL_CONTENT_TEXTNODESortInput
}

input STRAPI_TRAIL_CONTENT_TEXTNODESortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  content: SortOrderEnum
}

input STRAPI__MEDIASortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  name: SortOrderEnum
  alternativeText: SortOrderEnum
  caption: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  formats: STRAPI__MEDIAFormatsSortInput
  hash: SortOrderEnum
  ext: SortOrderEnum
  mime: SortOrderEnum
  size: SortOrderEnum
  url: SortOrderEnum
  createdAt: SortOrderEnum
  updatedAt: SortOrderEnum
  localFile: FileSortInput
  strapi_id: SortOrderEnum
}

input STRAPI__MEDIAFormatsSortInput {
  thumbnail: STRAPI__MEDIAFormatsThumbnailSortInput
  large: STRAPI__MEDIAFormatsLargeSortInput
  medium: STRAPI__MEDIAFormatsMediumSortInput
  small: STRAPI__MEDIAFormatsSmallSortInput
}

input STRAPI__MEDIAFormatsThumbnailSortInput {
  name: SortOrderEnum
  hash: SortOrderEnum
  ext: SortOrderEnum
  mime: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  size: SortOrderEnum
  url: SortOrderEnum
  provider_metadata: STRAPI__MEDIAFormatsThumbnailProvider_metadataSortInput
}

input STRAPI__MEDIAFormatsThumbnailProvider_metadataSortInput {
  public_id: SortOrderEnum
  resource_type: SortOrderEnum
}

input STRAPI__MEDIAFormatsLargeSortInput {
  name: SortOrderEnum
  hash: SortOrderEnum
  ext: SortOrderEnum
  mime: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  size: SortOrderEnum
  url: SortOrderEnum
  provider_metadata: STRAPI__MEDIAFormatsLargeProvider_metadataSortInput
}

input STRAPI__MEDIAFormatsLargeProvider_metadataSortInput {
  public_id: SortOrderEnum
  resource_type: SortOrderEnum
}

input STRAPI__MEDIAFormatsMediumSortInput {
  name: SortOrderEnum
  hash: SortOrderEnum
  ext: SortOrderEnum
  mime: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  size: SortOrderEnum
  url: SortOrderEnum
  provider_metadata: STRAPI__MEDIAFormatsMediumProvider_metadataSortInput
}

input STRAPI__MEDIAFormatsMediumProvider_metadataSortInput {
  public_id: SortOrderEnum
  resource_type: SortOrderEnum
}

input STRAPI__MEDIAFormatsSmallSortInput {
  name: SortOrderEnum
  hash: SortOrderEnum
  ext: SortOrderEnum
  mime: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  size: SortOrderEnum
  url: SortOrderEnum
  provider_metadata: STRAPI__MEDIAFormatsSmallProvider_metadataSortInput
}

input STRAPI__MEDIAFormatsSmallProvider_metadataSortInput {
  public_id: SortOrderEnum
  resource_type: SortOrderEnum
}

input FileSortInput {
  sourceInstanceName: SortOrderEnum
  absolutePath: SortOrderEnum
  relativePath: SortOrderEnum
  extension: SortOrderEnum
  size: SortOrderEnum
  prettySize: SortOrderEnum
  modifiedTime: SortOrderEnum
  accessTime: SortOrderEnum
  changeTime: SortOrderEnum
  birthTime: SortOrderEnum
  root: SortOrderEnum
  dir: SortOrderEnum
  base: SortOrderEnum
  ext: SortOrderEnum
  name: SortOrderEnum
  relativeDirectory: SortOrderEnum
  dev: SortOrderEnum
  mode: SortOrderEnum
  nlink: SortOrderEnum
  uid: SortOrderEnum
  gid: SortOrderEnum
  rdev: SortOrderEnum
  ino: SortOrderEnum
  atimeMs: SortOrderEnum
  mtimeMs: SortOrderEnum
  ctimeMs: SortOrderEnum
  atime: SortOrderEnum
  mtime: SortOrderEnum
  ctime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  blksize: SortOrderEnum
  blocks: SortOrderEnum
  url: SortOrderEnum
  publicURL: SortOrderEnum
  childrenImageSharp: ImageSharpSortInput
  childImageSharp: ImageSharpSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ImageSharpSortInput {
  fixed: ImageSharpFixedSortInput
  fluid: ImageSharpFluidSortInput
  gatsbyImageData: SortOrderEnum
  original: ImageSharpOriginalSortInput
  resize: ImageSharpResizeSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ImageSharpFixedSortInput {
  base64: SortOrderEnum
  tracedSVG: SortOrderEnum
  aspectRatio: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcWebp: SortOrderEnum
  srcSetWebp: SortOrderEnum
  originalName: SortOrderEnum
}

input ImageSharpFluidSortInput {
  base64: SortOrderEnum
  tracedSVG: SortOrderEnum
  aspectRatio: SortOrderEnum
  src: SortOrderEnum
  srcSet: SortOrderEnum
  srcWebp: SortOrderEnum
  srcSetWebp: SortOrderEnum
  sizes: SortOrderEnum
  originalImg: SortOrderEnum
  originalName: SortOrderEnum
  presentationWidth: SortOrderEnum
  presentationHeight: SortOrderEnum
}

input ImageSharpOriginalSortInput {
  width: SortOrderEnum
  height: SortOrderEnum
  src: SortOrderEnum
}

input ImageSharpResizeSortInput {
  src: SortOrderEnum
  tracedSVG: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  aspectRatio: SortOrderEnum
  originalName: SortOrderEnum
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  stop1: SortOrderEnum
  stop2: SortOrderEnum
  stop3: SortOrderEnum
  strapi_id: SortOrderEnum
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  parking1: SortOrderEnum
  parking2: SortOrderEnum
  parking3: SortOrderEnum
  strapi_id: SortOrderEnum
}

input STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  station1: SortOrderEnum
  station2: SortOrderEnum
  station3: SortOrderEnum
  strapi_id: SortOrderEnum
}

input STRAPI__COMPONENT_COORDS_COORDSSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  lat1: SortOrderEnum
  lat2: SortOrderEnum
  lat3: SortOrderEnum
  lat4: SortOrderEnum
  lat5: SortOrderEnum
  lat6: SortOrderEnum
  lat7: SortOrderEnum
  lat8: SortOrderEnum
  lat9: SortOrderEnum
  lat10: SortOrderEnum
  lng1: SortOrderEnum
  lng2: SortOrderEnum
  lng3: SortOrderEnum
  lng4: SortOrderEnum
  lng5: SortOrderEnum
  lng6: SortOrderEnum
  lng7: SortOrderEnum
  lng8: SortOrderEnum
  lng9: SortOrderEnum
  lng10: SortOrderEnum
  strapi_id: SortOrderEnum
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldSelector!): [String!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  sum(field: FileFieldSelector!): Float
  group(skip: Int, limit: Int, field: FileFieldSelector!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldSelector!): [String!]!
  max(field: FileFieldSelector!): Float
  min(field: FileFieldSelector!): Float
  sum(field: FileFieldSelector!): Float
  group(skip: Int, limit: Int, field: FileFieldSelector!): [FileGroupConnection!]!
  field: String!
  fieldValue: String
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldSelector!): [String!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  sum(field: DirectoryFieldSelector!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldSelector!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

input DirectoryFieldSelector {
  sourceInstanceName: FieldSelectorEnum
  absolutePath: FieldSelectorEnum
  relativePath: FieldSelectorEnum
  extension: FieldSelectorEnum
  size: FieldSelectorEnum
  prettySize: FieldSelectorEnum
  modifiedTime: FieldSelectorEnum
  accessTime: FieldSelectorEnum
  changeTime: FieldSelectorEnum
  birthTime: FieldSelectorEnum
  root: FieldSelectorEnum
  dir: FieldSelectorEnum
  base: FieldSelectorEnum
  ext: FieldSelectorEnum
  name: FieldSelectorEnum
  relativeDirectory: FieldSelectorEnum
  dev: FieldSelectorEnum
  mode: FieldSelectorEnum
  nlink: FieldSelectorEnum
  uid: FieldSelectorEnum
  gid: FieldSelectorEnum
  rdev: FieldSelectorEnum
  ino: FieldSelectorEnum
  atimeMs: FieldSelectorEnum
  mtimeMs: FieldSelectorEnum
  ctimeMs: FieldSelectorEnum
  atime: FieldSelectorEnum
  mtime: FieldSelectorEnum
  ctime: FieldSelectorEnum
  birthtime: FieldSelectorEnum
  birthtimeMs: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldSelector!): [String!]!
  max(field: DirectoryFieldSelector!): Float
  min(field: DirectoryFieldSelector!): Float
  sum(field: DirectoryFieldSelector!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldSelector!): [DirectoryGroupConnection!]!
  field: String!
  fieldValue: String
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input DirectorySortInput {
  sourceInstanceName: SortOrderEnum
  absolutePath: SortOrderEnum
  relativePath: SortOrderEnum
  extension: SortOrderEnum
  size: SortOrderEnum
  prettySize: SortOrderEnum
  modifiedTime: SortOrderEnum
  accessTime: SortOrderEnum
  changeTime: SortOrderEnum
  birthTime: SortOrderEnum
  root: SortOrderEnum
  dir: SortOrderEnum
  base: SortOrderEnum
  ext: SortOrderEnum
  name: SortOrderEnum
  relativeDirectory: SortOrderEnum
  dev: SortOrderEnum
  mode: SortOrderEnum
  nlink: SortOrderEnum
  uid: SortOrderEnum
  gid: SortOrderEnum
  rdev: SortOrderEnum
  ino: SortOrderEnum
  atimeMs: SortOrderEnum
  mtimeMs: SortOrderEnum
  ctimeMs: SortOrderEnum
  atime: SortOrderEnum
  mtime: SortOrderEnum
  ctime: SortOrderEnum
  birthtime: SortOrderEnum
  birthtimeMs: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SiteSiteMetadataFilterInput {
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  author: StringQueryOperatorInput
  image: StringQueryOperatorInput
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldSelector!): [String!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  sum(field: SiteFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFieldSelector!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

input SiteFieldSelector {
  buildTime: FieldSelectorEnum
  siteMetadata: SiteSiteMetadataFieldSelector
  port: FieldSelectorEnum
  host: FieldSelectorEnum
  polyfill: FieldSelectorEnum
  pathPrefix: FieldSelectorEnum
  jsxRuntime: FieldSelectorEnum
  trailingSlash: FieldSelectorEnum
  graphqlTypegen: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input SiteSiteMetadataFieldSelector {
  title: FieldSelectorEnum
  description: FieldSelectorEnum
  author: FieldSelectorEnum
  image: FieldSelectorEnum
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldSelector!): [String!]!
  max(field: SiteFieldSelector!): Float
  min(field: SiteFieldSelector!): Float
  sum(field: SiteFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFieldSelector!): [SiteGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  jsxRuntime: StringQueryOperatorInput
  trailingSlash: StringQueryOperatorInput
  graphqlTypegen: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteSortInput {
  buildTime: SortOrderEnum
  siteMetadata: SiteSiteMetadataSortInput
  port: SortOrderEnum
  host: SortOrderEnum
  polyfill: SortOrderEnum
  pathPrefix: SortOrderEnum
  jsxRuntime: SortOrderEnum
  trailingSlash: SortOrderEnum
  graphqlTypegen: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SiteSiteMetadataSortInput {
  title: SortOrderEnum
  description: SortOrderEnum
  author: SortOrderEnum
  image: SortOrderEnum
}

type SiteFunctionConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  sum(field: SiteFunctionFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldSelector!): [SiteFunctionGroupConnection!]!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

input SiteFunctionFieldSelector {
  functionRoute: FieldSelectorEnum
  pluginName: FieldSelectorEnum
  originalAbsoluteFilePath: FieldSelectorEnum
  originalRelativeFilePath: FieldSelectorEnum
  relativeCompiledFilePath: FieldSelectorEnum
  absoluteCompiledFilePath: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SiteFunctionGroupConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldSelector!): [String!]!
  max(field: SiteFunctionFieldSelector!): Float
  min(field: SiteFunctionFieldSelector!): Float
  sum(field: SiteFunctionFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldSelector!): [SiteFunctionGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFunctionFilterInput {
  functionRoute: StringQueryOperatorInput
  pluginName: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
  absoluteCompiledFilePath: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteFunctionSortInput {
  functionRoute: SortOrderEnum
  pluginName: SortOrderEnum
  originalAbsoluteFilePath: SortOrderEnum
  originalRelativeFilePath: SortOrderEnum
  relativeCompiledFilePath: SortOrderEnum
  absoluteCompiledFilePath: SortOrderEnum
  matchPath: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

input SitePluginFilterInput {
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldSelector!): [String!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  sum(field: SitePageFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePageFieldSelector!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

input SitePageFieldSelector {
  path: FieldSelectorEnum
  component: FieldSelectorEnum
  internalComponentName: FieldSelectorEnum
  componentChunkName: FieldSelectorEnum
  matchPath: FieldSelectorEnum
  pageContext: FieldSelectorEnum
  pluginCreator: SitePluginFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input SitePluginFieldSelector {
  resolve: FieldSelectorEnum
  name: FieldSelectorEnum
  version: FieldSelectorEnum
  nodeAPIs: FieldSelectorEnum
  browserAPIs: FieldSelectorEnum
  ssrAPIs: FieldSelectorEnum
  pluginFilepath: FieldSelectorEnum
  pluginOptions: FieldSelectorEnum
  packageJson: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldSelector!): [String!]!
  max(field: SitePageFieldSelector!): Float
  min(field: SitePageFieldSelector!): Float
  sum(field: SitePageFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePageFieldSelector!): [SitePageGroupConnection!]!
  field: String!
  fieldValue: String
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SitePageSortInput {
  path: SortOrderEnum
  component: SortOrderEnum
  internalComponentName: SortOrderEnum
  componentChunkName: SortOrderEnum
  matchPath: SortOrderEnum
  pageContext: SortOrderEnum
  pluginCreator: SitePluginSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input SitePluginSortInput {
  resolve: SortOrderEnum
  name: SortOrderEnum
  version: SortOrderEnum
  nodeAPIs: SortOrderEnum
  browserAPIs: SortOrderEnum
  ssrAPIs: SortOrderEnum
  pluginFilepath: SortOrderEnum
  pluginOptions: SortOrderEnum
  packageJson: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldSelector!): [String!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  sum(field: SitePluginFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldSelector!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldSelector!): [String!]!
  max(field: SitePluginFieldSelector!): Float
  min(field: SitePluginFieldSelector!): Float
  sum(field: SitePluginFieldSelector!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldSelector!): [SitePluginGroupConnection!]!
  field: String!
  fieldValue: String
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  sum(field: SiteBuildMetadataFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldSelector!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

input SiteBuildMetadataFieldSelector {
  buildTime: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldSelector!): [String!]!
  max(field: SiteBuildMetadataFieldSelector!): Float
  min(field: SiteBuildMetadataFieldSelector!): Float
  sum(field: SiteBuildMetadataFieldSelector!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldSelector!): [SiteBuildMetadataGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteBuildMetadataSortInput {
  buildTime: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldSelector!): [String!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  sum(field: ImageSharpFieldSelector!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldSelector!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldSelector!): [String!]!
  max(field: ImageSharpFieldSelector!): Float
  min(field: ImageSharpFieldSelector!): Float
  sum(field: ImageSharpFieldSelector!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldSelector!): [ImageSharpGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentDataFilterInput {
  content: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type ContentConnection {
  totalCount: Int!
  edges: [ContentEdge!]!
  nodes: [Content!]!
  pageInfo: PageInfo!
  distinct(field: ContentFieldSelector!): [String!]!
  max(field: ContentFieldSelector!): Float
  min(field: ContentFieldSelector!): Float
  sum(field: ContentFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentFieldSelector!): [ContentGroupConnection!]!
}

type ContentEdge {
  next: Content
  node: Content!
  previous: Content
}

input ContentFieldSelector {
  data: ContentDataFieldSelector
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

input ContentDataFieldSelector {
  content: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type ContentGroupConnection {
  totalCount: Int!
  edges: [ContentEdge!]!
  nodes: [Content!]!
  pageInfo: PageInfo!
  distinct(field: ContentFieldSelector!): [String!]!
  max(field: ContentFieldSelector!): Float
  min(field: ContentFieldSelector!): Float
  sum(field: ContentFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentFieldSelector!): [ContentGroupConnection!]!
  field: String!
  fieldValue: String
}

input ContentFilterInput {
  data: ContentDataFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ContentSortInput {
  data: ContentDataSortInput
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

input ContentDataSortInput {
  content: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type ContentDataConnection {
  totalCount: Int!
  edges: [ContentDataEdge!]!
  nodes: [ContentData!]!
  pageInfo: PageInfo!
  distinct(field: ContentDataFieldSelector!): [String!]!
  max(field: ContentDataFieldSelector!): Float
  min(field: ContentDataFieldSelector!): Float
  sum(field: ContentDataFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentDataFieldSelector!): [ContentDataGroupConnection!]!
}

type ContentDataEdge {
  next: ContentData
  node: ContentData!
  previous: ContentData
}

type ContentDataGroupConnection {
  totalCount: Int!
  edges: [ContentDataEdge!]!
  nodes: [ContentData!]!
  pageInfo: PageInfo!
  distinct(field: ContentDataFieldSelector!): [String!]!
  max(field: ContentDataFieldSelector!): Float
  min(field: ContentDataFieldSelector!): Float
  sum(field: ContentDataFieldSelector!): Float
  group(skip: Int, limit: Int, field: ContentDataFieldSelector!): [ContentDataGroupConnection!]!
  field: String!
  fieldValue: String
}

type CarAvailibilityConnection {
  totalCount: Int!
  edges: [CarAvailibilityEdge!]!
  nodes: [CarAvailibility!]!
  pageInfo: PageInfo!
  distinct(field: CarAvailibilityFieldSelector!): [String!]!
  max(field: CarAvailibilityFieldSelector!): Float
  min(field: CarAvailibilityFieldSelector!): Float
  sum(field: CarAvailibilityFieldSelector!): Float
  group(skip: Int, limit: Int, field: CarAvailibilityFieldSelector!): [CarAvailibilityGroupConnection!]!
}

type CarAvailibilityEdge {
  next: CarAvailibility
  node: CarAvailibility!
  previous: CarAvailibility
}

input CarAvailibilityFieldSelector {
  parking1: FieldSelectorEnum
  parking2: FieldSelectorEnum
  parking3: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type CarAvailibilityGroupConnection {
  totalCount: Int!
  edges: [CarAvailibilityEdge!]!
  nodes: [CarAvailibility!]!
  pageInfo: PageInfo!
  distinct(field: CarAvailibilityFieldSelector!): [String!]!
  max(field: CarAvailibilityFieldSelector!): Float
  min(field: CarAvailibilityFieldSelector!): Float
  sum(field: CarAvailibilityFieldSelector!): Float
  group(skip: Int, limit: Int, field: CarAvailibilityFieldSelector!): [CarAvailibilityGroupConnection!]!
  field: String!
  fieldValue: String
}

input CarAvailibilityFilterInput {
  parking1: StringQueryOperatorInput
  parking2: StringQueryOperatorInput
  parking3: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input CarAvailibilitySortInput {
  parking1: SortOrderEnum
  parking2: SortOrderEnum
  parking3: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type BusAvailibilityConnection {
  totalCount: Int!
  edges: [BusAvailibilityEdge!]!
  nodes: [BusAvailibility!]!
  pageInfo: PageInfo!
  distinct(field: BusAvailibilityFieldSelector!): [String!]!
  max(field: BusAvailibilityFieldSelector!): Float
  min(field: BusAvailibilityFieldSelector!): Float
  sum(field: BusAvailibilityFieldSelector!): Float
  group(skip: Int, limit: Int, field: BusAvailibilityFieldSelector!): [BusAvailibilityGroupConnection!]!
}

type BusAvailibilityEdge {
  next: BusAvailibility
  node: BusAvailibility!
  previous: BusAvailibility
}

input BusAvailibilityFieldSelector {
  stop1: FieldSelectorEnum
  stop2: FieldSelectorEnum
  stop3: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type BusAvailibilityGroupConnection {
  totalCount: Int!
  edges: [BusAvailibilityEdge!]!
  nodes: [BusAvailibility!]!
  pageInfo: PageInfo!
  distinct(field: BusAvailibilityFieldSelector!): [String!]!
  max(field: BusAvailibilityFieldSelector!): Float
  min(field: BusAvailibilityFieldSelector!): Float
  sum(field: BusAvailibilityFieldSelector!): Float
  group(skip: Int, limit: Int, field: BusAvailibilityFieldSelector!): [BusAvailibilityGroupConnection!]!
  field: String!
  fieldValue: String
}

input BusAvailibilityFilterInput {
  stop1: StringQueryOperatorInput
  stop2: StringQueryOperatorInput
  stop3: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input BusAvailibilitySortInput {
  stop1: SortOrderEnum
  stop2: SortOrderEnum
  stop3: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type TrainAvailibilityConnection {
  totalCount: Int!
  edges: [TrainAvailibilityEdge!]!
  nodes: [TrainAvailibility!]!
  pageInfo: PageInfo!
  distinct(field: TrainAvailibilityFieldSelector!): [String!]!
  max(field: TrainAvailibilityFieldSelector!): Float
  min(field: TrainAvailibilityFieldSelector!): Float
  sum(field: TrainAvailibilityFieldSelector!): Float
  group(skip: Int, limit: Int, field: TrainAvailibilityFieldSelector!): [TrainAvailibilityGroupConnection!]!
}

type TrainAvailibilityEdge {
  next: TrainAvailibility
  node: TrainAvailibility!
  previous: TrainAvailibility
}

input TrainAvailibilityFieldSelector {
  station1: FieldSelectorEnum
  station2: FieldSelectorEnum
  station3: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type TrainAvailibilityGroupConnection {
  totalCount: Int!
  edges: [TrainAvailibilityEdge!]!
  nodes: [TrainAvailibility!]!
  pageInfo: PageInfo!
  distinct(field: TrainAvailibilityFieldSelector!): [String!]!
  max(field: TrainAvailibilityFieldSelector!): Float
  min(field: TrainAvailibilityFieldSelector!): Float
  sum(field: TrainAvailibilityFieldSelector!): Float
  group(skip: Int, limit: Int, field: TrainAvailibilityFieldSelector!): [TrainAvailibilityGroupConnection!]!
  field: String!
  fieldValue: String
}

input TrainAvailibilityFilterInput {
  station1: StringQueryOperatorInput
  station2: StringQueryOperatorInput
  station3: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input TrainAvailibilitySortInput {
  station1: SortOrderEnum
  station2: SortOrderEnum
  station3: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type CoordsConnection {
  totalCount: Int!
  edges: [CoordsEdge!]!
  nodes: [Coords!]!
  pageInfo: PageInfo!
  distinct(field: CoordsFieldSelector!): [String!]!
  max(field: CoordsFieldSelector!): Float
  min(field: CoordsFieldSelector!): Float
  sum(field: CoordsFieldSelector!): Float
  group(skip: Int, limit: Int, field: CoordsFieldSelector!): [CoordsGroupConnection!]!
}

type CoordsEdge {
  next: Coords
  node: Coords!
  previous: Coords
}

input CoordsFieldSelector {
  lat1: FieldSelectorEnum
  lng1: FieldSelectorEnum
  lat2: FieldSelectorEnum
  lng2: FieldSelectorEnum
  lat3: FieldSelectorEnum
  lng3: FieldSelectorEnum
  lat4: FieldSelectorEnum
  lng4: FieldSelectorEnum
  lat5: FieldSelectorEnum
  lng5: FieldSelectorEnum
  lat6: FieldSelectorEnum
  lng6: FieldSelectorEnum
  lat7: FieldSelectorEnum
  lng7: FieldSelectorEnum
  lat8: FieldSelectorEnum
  lng8: FieldSelectorEnum
  lat9: FieldSelectorEnum
  lng9: FieldSelectorEnum
  lat10: FieldSelectorEnum
  lng10: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type CoordsGroupConnection {
  totalCount: Int!
  edges: [CoordsEdge!]!
  nodes: [Coords!]!
  pageInfo: PageInfo!
  distinct(field: CoordsFieldSelector!): [String!]!
  max(field: CoordsFieldSelector!): Float
  min(field: CoordsFieldSelector!): Float
  sum(field: CoordsFieldSelector!): Float
  group(skip: Int, limit: Int, field: CoordsFieldSelector!): [CoordsGroupConnection!]!
  field: String!
  fieldValue: String
}

input CoordsFilterInput {
  lat1: FloatQueryOperatorInput
  lng1: FloatQueryOperatorInput
  lat2: FloatQueryOperatorInput
  lng2: FloatQueryOperatorInput
  lat3: FloatQueryOperatorInput
  lng3: FloatQueryOperatorInput
  lat4: FloatQueryOperatorInput
  lng4: FloatQueryOperatorInput
  lat5: FloatQueryOperatorInput
  lng5: FloatQueryOperatorInput
  lat6: FloatQueryOperatorInput
  lng6: FloatQueryOperatorInput
  lat7: FloatQueryOperatorInput
  lng7: FloatQueryOperatorInput
  lat8: FloatQueryOperatorInput
  lng8: FloatQueryOperatorInput
  lat9: FloatQueryOperatorInput
  lng9: FloatQueryOperatorInput
  lat10: FloatQueryOperatorInput
  lng10: FloatQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input CoordsSortInput {
  lat1: SortOrderEnum
  lng1: SortOrderEnum
  lat2: SortOrderEnum
  lng2: SortOrderEnum
  lat3: SortOrderEnum
  lng3: SortOrderEnum
  lat4: SortOrderEnum
  lng4: SortOrderEnum
  lat5: SortOrderEnum
  lng5: SortOrderEnum
  lat6: SortOrderEnum
  lng6: SortOrderEnum
  lat7: SortOrderEnum
  lng7: SortOrderEnum
  lat8: SortOrderEnum
  lng8: SortOrderEnum
  lat9: SortOrderEnum
  lng9: SortOrderEnum
  lat10: SortOrderEnum
  lng10: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type UploadFileConnection {
  totalCount: Int!
  edges: [UploadFileEdge!]!
  nodes: [UploadFile!]!
  pageInfo: PageInfo!
  distinct(field: UploadFileFieldSelector!): [String!]!
  max(field: UploadFileFieldSelector!): Float
  min(field: UploadFileFieldSelector!): Float
  sum(field: UploadFileFieldSelector!): Float
  group(skip: Int, limit: Int, field: UploadFileFieldSelector!): [UploadFileGroupConnection!]!
}

type UploadFileEdge {
  next: UploadFile
  node: UploadFile!
  previous: UploadFile
}

input UploadFileFieldSelector {
  name: FieldSelectorEnum
  alternativeText: FieldSelectorEnum
  caption: FieldSelectorEnum
  width: FieldSelectorEnum
  height: FieldSelectorEnum
  formats: FieldSelectorEnum
  hash: FieldSelectorEnum
  ext: FieldSelectorEnum
  mime: FieldSelectorEnum
  size: FieldSelectorEnum
  url: FieldSelectorEnum
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
}

type UploadFileGroupConnection {
  totalCount: Int!
  edges: [UploadFileEdge!]!
  nodes: [UploadFile!]!
  pageInfo: PageInfo!
  distinct(field: UploadFileFieldSelector!): [String!]!
  max(field: UploadFileFieldSelector!): Float
  min(field: UploadFileFieldSelector!): Float
  sum(field: UploadFileFieldSelector!): Float
  group(skip: Int, limit: Int, field: UploadFileFieldSelector!): [UploadFileGroupConnection!]!
  field: String!
  fieldValue: String
}

input UploadFileFilterInput {
  name: StringQueryOperatorInput
  alternativeText: StringQueryOperatorInput
  caption: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  formats: JSONQueryOperatorInput
  hash: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  mime: StringQueryOperatorInput
  size: FloatQueryOperatorInput
  url: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input UploadFileSortInput {
  name: SortOrderEnum
  alternativeText: SortOrderEnum
  caption: SortOrderEnum
  width: SortOrderEnum
  height: SortOrderEnum
  formats: SortOrderEnum
  hash: SortOrderEnum
  ext: SortOrderEnum
  mime: SortOrderEnum
  size: SortOrderEnum
  url: SortOrderEnum
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
}

type STRAPI__MEDIAConnection {
  totalCount: Int!
  edges: [STRAPI__MEDIAEdge!]!
  nodes: [STRAPI__MEDIA!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__MEDIAFieldSelector!): [String!]!
  max(field: STRAPI__MEDIAFieldSelector!): Float
  min(field: STRAPI__MEDIAFieldSelector!): Float
  sum(field: STRAPI__MEDIAFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__MEDIAFieldSelector!): [STRAPI__MEDIAGroupConnection!]!
}

type STRAPI__MEDIAEdge {
  next: STRAPI__MEDIA
  node: STRAPI__MEDIA!
  previous: STRAPI__MEDIA
}

type STRAPI__MEDIAGroupConnection {
  totalCount: Int!
  edges: [STRAPI__MEDIAEdge!]!
  nodes: [STRAPI__MEDIA!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__MEDIAFieldSelector!): [String!]!
  max(field: STRAPI__MEDIAFieldSelector!): Float
  min(field: STRAPI__MEDIAFieldSelector!): Float
  sum(field: STRAPI__MEDIAFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__MEDIAFieldSelector!): [STRAPI__MEDIAGroupConnection!]!
  field: String!
  fieldValue: String
}

type STRAPI__COMPONENT_COORDS_COORDSConnection {
  totalCount: Int!
  edges: [STRAPI__COMPONENT_COORDS_COORDSEdge!]!
  nodes: [STRAPI__COMPONENT_COORDS_COORDS!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): [String!]!
  max(field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): Float
  min(field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): Float
  sum(field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): [STRAPI__COMPONENT_COORDS_COORDSGroupConnection!]!
}

type STRAPI__COMPONENT_COORDS_COORDSEdge {
  next: STRAPI__COMPONENT_COORDS_COORDS
  node: STRAPI__COMPONENT_COORDS_COORDS!
  previous: STRAPI__COMPONENT_COORDS_COORDS
}

type STRAPI__COMPONENT_COORDS_COORDSGroupConnection {
  totalCount: Int!
  edges: [STRAPI__COMPONENT_COORDS_COORDSEdge!]!
  nodes: [STRAPI__COMPONENT_COORDS_COORDS!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): [String!]!
  max(field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): Float
  min(field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): Float
  sum(field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__COMPONENT_COORDS_COORDSFieldSelector!): [STRAPI__COMPONENT_COORDS_COORDSGroupConnection!]!
  field: String!
  fieldValue: String
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINConnection {
  totalCount: Int!
  edges: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINEdge!]!
  nodes: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAIN!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): [String!]!
  max(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): Float
  min(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): Float
  sum(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINGroupConnection!]!
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINEdge {
  next: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAIN
  node: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAIN!
  previous: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAIN
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINGroupConnection {
  totalCount: Int!
  edges: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINEdge!]!
  nodes: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAIN!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): [String!]!
  max(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): Float
  min(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): Float
  sum(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINFieldSelector!): [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAINGroupConnection!]!
  field: String!
  fieldValue: String
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARConnection {
  totalCount: Int!
  edges: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAREdge!]!
  nodes: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAR!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): [String!]!
  max(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): Float
  min(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): Float
  sum(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARGroupConnection!]!
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAREdge {
  next: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAR
  node: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAR!
  previous: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAR
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARGroupConnection {
  totalCount: Int!
  edges: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAREdge!]!
  nodes: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAR!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): [String!]!
  max(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): Float
  min(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): Float
  sum(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARFieldSelector!): [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CARGroupConnection!]!
  field: String!
  fieldValue: String
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSConnection {
  totalCount: Int!
  edges: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSEdge!]!
  nodes: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUS!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): [String!]!
  max(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): Float
  min(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): Float
  sum(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSGroupConnection!]!
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSEdge {
  next: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUS
  node: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUS!
  previous: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUS
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSGroupConnection {
  totalCount: Int!
  edges: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSEdge!]!
  nodes: [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUS!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): [String!]!
  max(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): Float
  min(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): Float
  sum(field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSFieldSelector!): [STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUSGroupConnection!]!
  field: String!
  fieldValue: String
}

type STRAPI_TRAIL_CONTENT_TEXTNODEConnection {
  totalCount: Int!
  edges: [STRAPI_TRAIL_CONTENT_TEXTNODEEdge!]!
  nodes: [STRAPI_TRAIL_CONTENT_TEXTNODE!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): [String!]!
  max(field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): Float
  min(field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): Float
  sum(field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): [STRAPI_TRAIL_CONTENT_TEXTNODEGroupConnection!]!
}

type STRAPI_TRAIL_CONTENT_TEXTNODEEdge {
  next: STRAPI_TRAIL_CONTENT_TEXTNODE
  node: STRAPI_TRAIL_CONTENT_TEXTNODE!
  previous: STRAPI_TRAIL_CONTENT_TEXTNODE
}

type STRAPI_TRAIL_CONTENT_TEXTNODEGroupConnection {
  totalCount: Int!
  edges: [STRAPI_TRAIL_CONTENT_TEXTNODEEdge!]!
  nodes: [STRAPI_TRAIL_CONTENT_TEXTNODE!]!
  pageInfo: PageInfo!
  distinct(field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): [String!]!
  max(field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): Float
  min(field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): Float
  sum(field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): Float
  group(skip: Int, limit: Int, field: STRAPI_TRAIL_CONTENT_TEXTNODEFieldSelector!): [STRAPI_TRAIL_CONTENT_TEXTNODEGroupConnection!]!
  field: String!
  fieldValue: String
}

input InstagramContentAlbumFilterListInput {
  elemMatch: InstagramContentAlbumFilterInput
}

input InstagramContentAlbumFilterInput {
  id: StringQueryOperatorInput
  media_url: StringQueryOperatorInput
  media_type: StringQueryOperatorInput
  timestamp: DateQueryOperatorInput
  localImage: FileFilterInput
  localFile: FileFilterInput
}

type InstagramContentConnection {
  totalCount: Int!
  edges: [InstagramContentEdge!]!
  nodes: [InstagramContent!]!
  pageInfo: PageInfo!
  distinct(field: InstagramContentFieldSelector!): [String!]!
  max(field: InstagramContentFieldSelector!): Float
  min(field: InstagramContentFieldSelector!): Float
  sum(field: InstagramContentFieldSelector!): Float
  group(skip: Int, limit: Int, field: InstagramContentFieldSelector!): [InstagramContentGroupConnection!]!
}

type InstagramContentEdge {
  next: InstagramContent
  node: InstagramContent!
  previous: InstagramContent
}

input InstagramContentFieldSelector {
  id: FieldSelectorEnum
  parent: NodeFieldSelector
  children: NodeFieldSelector
  internal: InternalFieldSelector
  media_url: FieldSelectorEnum
  media_type: FieldSelectorEnum
  permalink: FieldSelectorEnum
  timestamp: FieldSelectorEnum
  caption: FieldSelectorEnum
  username: FieldSelectorEnum
  album: InstagramContentAlbumFieldSelector
  media_id: FieldSelectorEnum
  localImage: FileFieldSelector
  localFile: FileFieldSelector
}

input InstagramContentAlbumFieldSelector {
  id: FieldSelectorEnum
  media_url: FieldSelectorEnum
  media_type: FieldSelectorEnum
  timestamp: FieldSelectorEnum
  localImage: FileFieldSelector
  localFile: FileFieldSelector
}

type InstagramContentGroupConnection {
  totalCount: Int!
  edges: [InstagramContentEdge!]!
  nodes: [InstagramContent!]!
  pageInfo: PageInfo!
  distinct(field: InstagramContentFieldSelector!): [String!]!
  max(field: InstagramContentFieldSelector!): Float
  min(field: InstagramContentFieldSelector!): Float
  sum(field: InstagramContentFieldSelector!): Float
  group(skip: Int, limit: Int, field: InstagramContentFieldSelector!): [InstagramContentGroupConnection!]!
  field: String!
  fieldValue: String
}

input InstagramContentFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  media_url: StringQueryOperatorInput
  media_type: StringQueryOperatorInput
  permalink: StringQueryOperatorInput
  timestamp: DateQueryOperatorInput
  caption: StringQueryOperatorInput
  username: StringQueryOperatorInput
  album: InstagramContentAlbumFilterListInput
  media_id: StringQueryOperatorInput
  localImage: FileFilterInput
  localFile: FileFilterInput
}

input InstagramContentSortInput {
  id: SortOrderEnum
  parent: NodeSortInput
  children: NodeSortInput
  internal: InternalSortInput
  media_url: SortOrderEnum
  media_type: SortOrderEnum
  permalink: SortOrderEnum
  timestamp: SortOrderEnum
  caption: SortOrderEnum
  username: SortOrderEnum
  album: InstagramContentAlbumSortInput
  media_id: SortOrderEnum
  localImage: FileSortInput
  localFile: FileSortInput
}

input InstagramContentAlbumSortInput {
  id: SortOrderEnum
  media_url: SortOrderEnum
  media_type: SortOrderEnum
  timestamp: SortOrderEnum
  localImage: FileSortInput
  localFile: FileSortInput
}

type StrapiTrail implements Node {
  slug: String
  title: String
  trail_type: ENUM_TRAIL_TRAIL_TYPE!
  criterion: ENUM_TRAIL_CRITERION
  availability_car: CarAvailibility!
  availability_bus: BusAvailibility!
  availability_train: TrainAvailibility!
  content: Content!
  coords: Coords!
  train: TrainAvailibility!
  cover_image: UploadFile
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum ENUM_TRAIL_TRAIL_TYPE {
  aa
  ab
}

enum ENUM_TRAIL_CRITERION {
  fast
  short
  bike1
  bike2
  bike3
  turist1
  turist2
}

type Content implements Node {
  data: ContentData
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ContentData implements Node {
  content: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type CarAvailibility implements Node {
  parking1: String
  parking2: String
  parking3: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type BusAvailibility implements Node {
  stop1: String
  stop2: String
  stop3: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type TrainAvailibility implements Node {
  station1: String
  station2: String
  station3: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Coords implements Node {
  lat1: Float!
  lng1: Float!
  lat2: Float!
  lng2: Float!
  lat3: Float!
  lng3: Float!
  lat4: Float!
  lng4: Float!
  lat5: Float!
  lng5: Float!
  lat6: Float!
  lng6: Float!
  lat7: Float!
  lng7: Float!
  lat8: Float!
  lng8: Float!
  lat9: Float!
  lng9: Float!
  lat10: Float!
  lng10: Float!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type UploadFile implements Node {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type STRAPI__MEDIA implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: STRAPI__MEDIAFormats
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  localFile: File
  strapi_id: Int
}

type STRAPI__MEDIAFormats {
  thumbnail: STRAPI__MEDIAFormatsThumbnail
  large: STRAPI__MEDIAFormatsLarge
  medium: STRAPI__MEDIAFormatsMedium
  small: STRAPI__MEDIAFormatsSmall
}

type STRAPI__MEDIAFormatsThumbnail {
  name: String
  hash: String
  ext: String
  mime: String
  width: Int
  height: Int
  size: Float
  url: String
  provider_metadata: STRAPI__MEDIAFormatsThumbnailProvider_metadata
}

type STRAPI__MEDIAFormatsThumbnailProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__MEDIAFormatsLarge {
  name: String
  hash: String
  ext: String
  mime: String
  width: Int
  height: Int
  size: Float
  url: String
  provider_metadata: STRAPI__MEDIAFormatsLargeProvider_metadata
}

type STRAPI__MEDIAFormatsLargeProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__MEDIAFormatsMedium {
  name: String
  hash: String
  ext: String
  mime: String
  width: Int
  height: Int
  size: Float
  url: String
  provider_metadata: STRAPI__MEDIAFormatsMediumProvider_metadata
}

type STRAPI__MEDIAFormatsMediumProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__MEDIAFormatsSmall {
  name: String
  hash: String
  ext: String
  mime: String
  width: Int
  height: Int
  size: Float
  url: String
  provider_metadata: STRAPI__MEDIAFormatsSmallProvider_metadata
}

type STRAPI__MEDIAFormatsSmallProvider_metadata {
  public_id: String
  resource_type: String
}

type STRAPI__COMPONENT_COORDS_COORDS implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  lat1: Float
  lat2: Float
  lat3: Int
  lat4: Int
  lat5: Float
  lat6: Int
  lat7: Int
  lat8: Int
  lat9: Int
  lat10: Int
  lng1: Float
  lng2: Float
  lng3: Float
  lng4: Float
  lng5: Float
  lng6: Int
  lng7: Int
  lng8: Int
  lng9: Int
  lng10: Int
  strapi_id: Int
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAIN implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  station1: String
  station2: String
  station3: String
  strapi_id: Int
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAR implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  parking1: String
  parking2: String
  parking3: String
  strapi_id: Int
}

type STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUS implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  stop1: String
  stop2: String
  stop3: String
  strapi_id: Int
}

type STRAPI_TRAIL_CONTENT_TEXTNODE implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  content: String
}

type STRAPI_TRAIL implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  title: String
  content: STRAPI_TRAILContent
  criterion: String
  trail_type: String
  slug: String
  createdAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  updatedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  publishedAt(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  cover_image: STRAPI__MEDIA
  bus: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_BUS
  car: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_CAR
  train: STRAPI__COMPONENT_AVAILABILITY_AVAILABILITY_TRAIN
  coords: STRAPI__COMPONENT_COORDS_COORDS
  strapi_id: Int
  photos: [STRAPI__MEDIA]
}

type STRAPI_TRAILContent {
  data: STRAPI_TRAIL_CONTENT_TEXTNODE
}

type InstagramContent implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  media_url: String
  media_type: String
  permalink: String
  timestamp(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  caption: String
  username: String
  album: [InstagramContentAlbum]
  media_id: String
  localImage: File
  localFile: File
}

type InstagramContentAlbum {
  id: String
  media_url: String
  media_type: String
  timestamp(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  localImage: File
  localFile: File
}